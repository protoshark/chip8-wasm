{"version":3,"sources":["../node_modules/chip8/index_bg.js","../node_modules/chip8/index.js"],"names":["heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","Error","initialize","WASM_VECTOR_LEN","_assertNum","n","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","cachegetUint16Memory0","getArrayU16FromWasm0","Uint16Array","logError","f","apply","this","arguments","e","error","message","stack","toString","_","console","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","handleError","CHIP8","__destroy_into_raw","offset","retptr","r0","r1","v0","slice","mask","x","value","Object","create","prototype","rom","ptr0","malloc","passArray8ToWasm0","len0","__wrap","__wbg_error_4bb6c2a97407129a","arg0","arg1","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","realloc","mem","code","charCodeAt","passStringToWasm0","__wbindgen_object_drop_ref","__wbindgen_is_undefined","_assertBoolean","__wbg_self_f865985e662246aa","self","__wbg_msCrypto_f6dddc6ae048b7e2","msCrypto","__wbg_crypto_bfb05100db79193b","crypto","__wbg_getRandomValues_57e4008f45f0e105","getRandomValues","__wbg_static_accessor_MODULE_39947eb3fe77895f","__wbg_require_c59851dfa0dc7e78","arg2","__wbg_randomFillSync_d90848a552cbd666","randomFillSync","__wbg_new_135e963dedf67b22","__wbg_newwithlength_78dc302d31527318","__wbg_subarray_34c228a45c72d146","__wbg_length_317f0dd77f7a6673","__wbg_set_4a5072a31008e0cb","__wbg_buffer_ebc6c8e75510eae3","__wbindgen_throw","__wbindgen_memory"],"mappings":"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","file":"static/js/3.a641993e.chunk.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction _assertBoolean(n) {\n    if (typeof(n) !== 'boolean') {\n        throw new Error('expected a boolean argument');\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    if (typeof(heap_next) !== 'number') throw new Error('corrupt heap');\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n*/\nexport function initialize() {\n    wasm.initialize();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertNum(n) {\n    if (typeof(n) !== 'number') throw new Error('expected a number argument');\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachegetUint16Memory0 = null;\nfunction getUint16Memory0() {\n    if (cachegetUint16Memory0 === null || cachegetUint16Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachegetUint16Memory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    return getUint16Memory0().subarray(ptr / 2, ptr / 2 + len);\n}\n\nfunction logError(f) {\n    return function () {\n        try {\n            return f.apply(this, arguments);\n\n        } catch (e) {\n            let error = (function () {\n                try {\n                    return e instanceof Error ? `${e.message}\\n\\nStack:\\n${e.stack}` : e.toString();\n                } catch(_) {\n                    return \"<failed to stringify thrown value>\";\n                }\n            }());\n            console.error(\"wasm-bindgen: imported JS function that was not marked as `catch` threw an error:\", error);\n            throw e;\n        }\n    };\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        if (ret.read !== arg.length) throw new Error('failed to pass whole string');\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction handleError(f) {\n    return function () {\n        try {\n            return f.apply(this, arguments);\n\n        } catch (e) {\n            wasm.__wbindgen_exn_store(addHeapObject(e));\n        }\n    };\n}\n/**\n*/\nexport class CHIP8 {\n\n    constructor() {\n        throw new Error('cannot invoke `new` directly');\n    }\n\n    static __wrap(ptr) {\n        const obj = Object.create(CHIP8.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_chip8_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} rom\n    * @returns {CHIP8}\n    */\n    static new(rom) {\n        var ptr0 = passArray8ToWasm0(rom, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.chip8_new(ptr0, len0);\n        return CHIP8.__wrap(ret);\n    }\n    /**\n    * @param {number} offset\n    * @returns {number}\n    */\n    rb(offset) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(offset);\n        var ret = wasm.chip8_rb(this.ptr, offset);\n        return ret;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    dump_heap() {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            wasm.chip8_dump_heap(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} offset\n    * @returns {number}\n    */\n    get_vram(offset) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(offset);\n        var ret = wasm.chip8_get_vram(this.ptr, offset);\n        return ret;\n    }\n    /**\n    * @param {number} mask\n    */\n    set_keypad(mask) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(mask);\n        wasm.chip8_set_keypad(this.ptr, mask);\n    }\n    /**\n    * @returns {number}\n    */\n    status() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.chip8_status(this.ptr);\n        return ret;\n    }\n    /**\n    */\n    set_running() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        wasm.chip8_set_running(this.ptr);\n    }\n    /**\n    */\n    run_cycle() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        wasm.chip8_run_cycle(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    pc() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.chip8_pc(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    sp() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.chip8_sp(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} x\n    * @returns {number}\n    */\n    register(x) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(x);\n        var ret = wasm.chip8_register(this.ptr, x);\n        return ret;\n    }\n    /**\n    * @param {number} x\n    * @param {number} value\n    */\n    set_register(x, value) {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        _assertNum(x);\n        _assertNum(value);\n        wasm.chip8_set_register(this.ptr, x, value);\n    }\n    /**\n    * @returns {number}\n    */\n    i() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.chip8_i(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    delay() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.chip8_delay(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    sound() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        var ret = wasm.chip8_sound(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {Uint16Array}\n    */\n    stack() {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            wasm.chip8_stack(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU16FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 2);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    */\n    decrement_timers() {\n        if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n        _assertNum(this.ptr);\n        wasm.chip8_decrement_timers(this.ptr);\n    }\n}\n\nexport const __wbg_error_4bb6c2a97407129a = logError(function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n});\n\nexport const __wbg_new_59cb74e423758ede = logError(function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n});\n\nexport const __wbg_stack_558ba5917b466edd = logError(function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n});\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    _assertBoolean(ret);\n    return ret;\n};\n\nexport const __wbg_self_f865985e662246aa = handleError(function() {\n    var ret = self.self;\n    return addHeapObject(ret);\n});\n\nexport const __wbg_msCrypto_f6dddc6ae048b7e2 = logError(function(arg0) {\n    var ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n});\n\nexport const __wbg_crypto_bfb05100db79193b = logError(function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n});\n\nexport const __wbg_getRandomValues_57e4008f45f0e105 = handleError(function(arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n});\n\nexport const __wbg_static_accessor_MODULE_39947eb3fe77895f = logError(function() {\n    var ret = module;\n    return addHeapObject(ret);\n});\n\nexport const __wbg_require_c59851dfa0dc7e78 = handleError(function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n});\n\nexport const __wbg_randomFillSync_d90848a552cbd666 = handleError(function(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n});\n\nexport const __wbg_new_135e963dedf67b22 = logError(function(arg0) {\n    var ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n});\n\nexport const __wbg_newwithlength_78dc302d31527318 = logError(function(arg0) {\n    var ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n});\n\nexport const __wbg_subarray_34c228a45c72d146 = logError(function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n});\n\nexport const __wbg_length_317f0dd77f7a6673 = logError(function(arg0) {\n    var ret = getObject(arg0).length;\n    _assertNum(ret);\n    return ret;\n});\n\nexport const __wbg_set_4a5072a31008e0cb = logError(function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n});\n\nexport const __wbg_buffer_ebc6c8e75510eae3 = logError(function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n});\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n","import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";"],"sourceRoot":""}